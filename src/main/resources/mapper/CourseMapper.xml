<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hzvtc.bl.dao.CourseDao">
    <!-- Course的resultMap,column是给数据库列起的别名,它对应property类的属性-->
    <resultMap id="result_Course_Map" type="com.hzvtc.bl.entity.Course">
        <id column="c_id" property="cId" />
        <result column="c_classid" property="cClassid" />
        <result column="c_teacherid" property="cTeacherid" />
        <result column="c_coursename" property="cCoursename" />
    </resultMap>

	   <!-- Assist用于辅助工具类setRequires设置的条件,${req.require}表示列名,#{req.value}表示值它是防SQL注入的 -->
    <sql id="Assist">
        <where>
            <foreach collection="require" item="req" separator=" ">
                ${req.require} #{req.value} <if test="req.suffix != null"> ${req.suffix}</if>
            </foreach>
        </where>
    </sql>

	   <!-- updateAssist用于更新数据的使用它拓展自Assist,用于辅助工具类setRequires设置的条件,${req.require}表示列名,#{req.value}表示值它是防SQL注入的 -->
    <sql id="updateAssist">
        <where>
            <foreach collection="assist.require" item="req" separator=" ">
                ${req.require} #{req.value} <if test="req.suffix != null"> ${req.suffix}</if>
            </foreach>
        </where>
    </sql>

    <!-- 数据库中表名为:course的列名,as前是数据库的列明,as后是列的别名用于映射成实体类中的属性,需要注意的是别名必须与resultMap中的column别名一致 -->
    <sql id="course_Column">
        course.c_id as c_id
        ,course.c_classid as c_classid
        ,course.c_teacherid as c_teacherid
        ,course.c_coursename as c_coursename
    </sql>

    <!--获得类名为:Course对应的数据库表的数据总行数 -->
    <select id="getCourseRowCount" parameterType="com.hzvtc.bl.common.Assist" resultType="java.lang.Long">
        select count(c_id) from course
        <if test="require!=null"><include refid="Assist" /></if>
    </select>
    <!-- 获得类名为:Course对应数据库中表的数据集合 -->
    <select id="selectCourse" parameterType="com.hzvtc.bl.common.Assist"  resultMap="result_Course_Map">
        select  <if test="distinct !=null">${distinct}</if>
        <choose>
            <when test="resultColumn!=null">${resultColumn}</when>
            <otherwise>
        <include refid="course_Column" /> 
            </otherwise>
        </choose>
        from course
        <choose>
            <when test="rowSize ==null">
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
            </when>
            <otherwise>
                inner join
                (
                SELECT c_id as primary_key FROM course
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
                <choose>
                    <when test="startRow !=null and rowSize !=null">LIMIT #{startRow},#{rowSize} </when>
                    <when test="rowSize !=null">LIMIT #{rowSize}</when>
                 </choose>
                 ) as tmp
                 on tmp.primary_key=course.c_id
            </otherwise>
        </choose>
    </select> 

    <!-- 获得一个Course对象,以参数Course对象中不为空的属性作为条件进行查询-->
    <select id="selectCourseByObj" parameterType="com.hzvtc.bl.entity.Course" resultMap="result_Course_Map">
        select 
            <include refid="course_Column" /> 
        from course
        <where>
            <if test="cCoursename != null "> and course.c_coursename = #{cCoursename}</if>
            <if test="cTeacherid != null "> and course.c_teacherid = #{cTeacherid}</if>
            <if test="cClassid != null "> and course.c_classid = #{cClassid}</if>
            <if test="cId != null "> and course.c_id = #{cId}</if>
        </where>
    </select> 

    <!-- 通过Course的id获得对应数据库中表的数据对象-->
    <select id="selectCourseById" parameterType="java.lang.Integer" resultMap="result_Course_Map">
        select 
            <include refid="course_Column" /> 
        from course
        where course.c_id = #{id}
    </select> 

    <!-- 将Course插入到对应数据库的表中,包括属性值为null的数据-->

    <insert id="insertCourse" parameterType="com.hzvtc.bl.entity.Course">
        insert into course(c_id,c_classid,c_teacherid,c_coursename) 
        values(#{cId},#{cClassid},#{cTeacherid},#{cCoursename})
    </insert>

    <!-- 将Course中属性值不为null的数据,插入到对应数据库的表中-->
    <insert id="insertNonEmptyCourse" parameterType="com.hzvtc.bl.entity.Course">
        insert into course
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="cId != null">c_id,</if>
            <if test="cClassid != null">c_classid,</if>
            <if test="cTeacherid != null">c_teacherid,</if>
            <if test="cCoursename != null">c_coursename,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="cId != null"> #{cId},</if>
            <if test="cClassid != null"> #{cClassid},</if>
            <if test="cTeacherid != null"> #{cTeacherid},</if>
            <if test="cCoursename != null"> #{cCoursename},</if>
        </trim>
    </insert>

    <!-- 将Course批量插入到对应数据库的表中-->
    <insert id="insertCourseByBatch" parameterType="ArrayList">
        insert into course(c_id,c_classid,c_teacherid,c_coursename) values
        <foreach collection="list" item="item" index="index" separator="," >
            (#{item.cId},#{item.cClassid},#{item.cTeacherid},#{item.cCoursename})
        </foreach>
    </insert>

    <!-- 通过Course的id将数据库表中对应的数据删除-->
    <delete id="deleteCourseById" parameterType="java.lang.Integer">
        delete from course
        where c_id = #{id}
    </delete>

    <!-- 通过辅助工具Assist中的条件将Course对应的数据库表的数据删除-->
    <delete id="deleteCourse" parameterType="com.hzvtc.bl.common.Assist">
        delete from course
        <if test="require!=null"><include refid="Assist" /></if>
    </delete>

    <!-- 通过Course的id将Course的数据更新到数据库中对应的表,包括值null的数据-->
    <update id="updateCourseById" parameterType="com.hzvtc.bl.entity.Course">
        update course set
            c_classid=#{cClassid}
            ,c_teacherid=#{cTeacherid}
            ,c_coursename=#{cCoursename}
        where c_id=#{cId}
    </update>

    <!-- 通过Course的id将Course中属性值不为null的数据更新到数据库对应的表中-->
    <update id="updateNonEmptyCourseById" parameterType="com.hzvtc.bl.entity.Course">
        update course
        <set>
            <if test="cClassid != null">
                c_classid=#{cClassid},
            </if>
            <if test="cTeacherid != null">
                c_teacherid=#{cTeacherid},
            </if>
            <if test="cCoursename != null">
                c_coursename=#{cCoursename},
            </if>
        </set>
        where c_id=#{cId}
    </update>

    <!-- 通过辅助工具Assist中的条件将Course中的数据更新到数据库对应的表中,包括值为null的数据-->
    <update id="updateCourse" parameterType="map">
        update course
        <set>
                c_id=#{enti.cId},
                c_classid=#{enti.cClassid},
                c_teacherid=#{enti.cTeacherid},
                c_coursename=#{enti.cCoursename},
        </set>
        <if test="assist.require!=null"><include refid="updateAssist" /></if>
    </update>

    <!-- 通过辅助工具Assist中的条件将Course中属性值不为null的数据更新到数据库对应的表中-->
    <update id="updateNonEmptyCourse" parameterType="map">
        update course
        <set>
            <if test="enti.cId != null">
                c_id=#{enti.cId},
            </if>
            <if test="enti.cClassid != null">
                c_classid=#{enti.cClassid},
            </if>
            <if test="enti.cTeacherid != null">
                c_teacherid=#{enti.cTeacherid},
            </if>
            <if test="enti.cCoursename != null">
                c_coursename=#{enti.cCoursename},
            </if>
        </set>
        <if test="assist.require!=null"><include refid="updateAssist" /></if>
    </update>

</mapper>